const express = require('express');
const router = express.Router();
const admin = require('firebase-admin');

// Middleware de autentica√ß√£o aprimorado
const authenticateUser = async (req, res, next) => {
  try {
    const token = req.headers.authorization?.split('Bearer ')[1];
    if (!token) {
      req.user = { uid: 'anonymous', isAnonymous: true };
      next();
      return;
    }
    
    try {
      const decodedToken = await admin.auth().verifyIdToken(token);
      req.user = { ...decodedToken, isAnonymous: false };
    } catch (authError) {
      req.user = { uid: 'anonymous', isAnonymous: true };
    }
    
    next();
  } catch (error) {
    req.user = { uid: 'anonymous', isAnonymous: true };
    next();
  }
};

// **ENDPOINT PRINCIPAL MELHORADO - INTEGRA√á√ÉO COMPLETA**
router.post('/query', authenticateUser, async (req, res) => {
  try {
    const { question, context, page } = req.body;
    
    console.log('ü§ñ Agente Enhanced recebeu:', { question, page, user: req.user?.uid });
    
    // Verifica se o Firebase est√° dispon√≠vel
    if (global.firebaseMockMode) {
      return res.json({
        answer: `
          <div class="alert alert-warning">
            <h4>üöß Modo de Demonstra√ß√£o</h4>
            <p>Firebase n√£o configurado. Configure as vari√°veis de ambiente para acesso aos dados reais.</p>
            <p><strong>Sua pergunta:</strong> "${question}"</p>
          </div>
        `
      });
    }
    
    const db = admin.firestore();
    const storage = admin.storage();
    
    // **COLETA DADOS DE TODAS AS COLE√á√ïES**
    const agentData = await collectAllData(db, req.user, question, page);
    
    // **GERA RESPOSTA INTELIGENTE BASEADA NO CONTEXTO**
    const response = await generateEnhancedResponse(question, agentData, context, page, req.user);
    
    console.log('‚úÖ Agente respondeu com sucesso');
    res.json(response);
    
  } catch (error) {
    console.error('‚ùå Erro no agente:', error);
    res.status(500).json({ 
      answer: `
        <div class="alert alert-error">
          <h4>üö® Erro Interno</h4>
          <p>Desculpe, ocorreu um erro. Tente novamente em alguns instantes.</p>
          <details><summary>Detalhes t√©cnicos</summary><code>${error.message}</code></details>
        </div>
      `,
      error: error.message
    });
  }
});

// **ENDPOINT PARA AN√ÅLISE E ADMINISTRA√á√ÉO DE ESTA√á√ïES**
router.post('/admin-analysis', authenticateUser, async (req, res) => {
  try {
    const { action, stationId, fixes } = req.body;
    console.log('‚öôÔ∏è Admin Agent recebeu:', { action, stationId, user: req.user?.uid });

    if (global.firebaseMockMode) {
      return res.json({
        message: `Modo de demonstra√ß√£o: A√ß√£o '${action}' para esta√ß√£o '${stationId}' (mock).`
      });
    }

    const db = admin.firestore();

    let result;
    switch (action) {
      case 'analyze-station':
        result = await handleAnalyzeStation(db, stationId);
        break;
      case 'analyze-all':
        result = await handleAnalyzeAllStations(db);
        break;
      case 'suggest-improvements':
        result = await handleGenerateSuggestions(db, stationId);
        break;
      case 'auto-fix':
        result = await handleAutoFixStation(db, stationId, fixes);
        break;
      case 'validate-pep':
        result = await handleValidatePEP(db, stationId);
        break;
      default:
        return res.status(400).json({ error: 'A√ß√£o de administra√ß√£o desconhecida.' });
    }

    console.log(`‚úÖ Admin Agent respondeu para a√ß√£o '${action}'`);
    res.json(result);

  } catch (error) {
    console.error('‚ùå Erro no agente de administra√ß√£o:', error);
    res.status(500).json({
      error: `Erro no processamento da a√ß√£o de administra√ß√£o: ${error.message}`
    });
  }
});

// **FUN√á√ïES AUXILIARES PARA ADMIN-ANALYSIS**

async function handleAnalyzeStation(db, stationId) {
  // Implementar l√≥gica de an√°lise de esta√ß√£o espec√≠fica
  console.log(`Analisando esta√ß√£o: ${stationId}`);
  return { status: 'success', message: `An√°lise da esta√ß√£o ${stationId} conclu√≠da (mock).` };
}

async function handleAnalyzeAllStations(db) {
  console.log('Analisando todas as esta√ß√µes...');
  const stationsSnapshot = await db.collection('estacoes_clinicas').get();
  const stations = stationsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  return { status: 'success', stations };
}

async function handleGenerateSuggestions(db, stationId) {
  // Implementar l√≥gica de gera√ß√£o de sugest√µes
  console.log(`Gerando sugest√µes para esta√ß√£o: ${stationId}`);
  return { status: 'success', message: `Sugest√µes para ${stationId} geradas (mock).` };
}

async function handleAutoFixStation(db, stationId, fixes) {
  // Implementar l√≥gica de corre√ß√£o autom√°tica
  console.log(`Aplicando corre√ß√µes para esta√ß√£o: ${stationId}, fixes: ${fixes}`);
  return { status: 'success', message: `Corre√ß√µes para ${stationId} aplicadas (mock).` };
}

async function handleValidatePEP(db, stationId) {
  // Implementar l√≥gica de valida√ß√£o PEP
  console.log(`Validando PEP para esta√ß√£o: ${stationId}`);
  return { status: 'success', message: `Valida√ß√£o PEP para ${stationId} conclu√≠da (mock).` };
}

// **FUN√á√ÉO PARA COLETAR DADOS DE TODAS AS COLE√á√ïES**
async function collectAllData(db, user, question, page) {
  console.log('üîç Coletando dados de todas as cole√ß√µes...');
  
  const data = {
    stations: [],
    users: [],
    sessions: [],
    scores: [],
    userProgress: [],
    statistics: {},
    storageFiles: [],
    metadata: {
      timestamp: new Date().toISOString(),
      user: user?.uid || 'anonymous',
      page: page || 'unknown',
      totalCollections: 0
    }
  };
  
  try {
    // **1. ESTA√á√ïES CL√çNICAS - Busca inteligente**
    const stationsQuery = buildStationsQuery(db, question);
    const stationsSnapshot = await stationsQuery.get();
    stationsSnapshot.forEach(doc => {
      data.stations.push({ id: doc.id, ...doc.data() });
    });
    
    // **2. USU√ÅRIOS ATIVOS**
    try {
      const usersSnapshot = await db.collection('users').limit(10).get();
      usersSnapshot.forEach(doc => {
        const userData = doc.data();
        data.users.push({
          id: doc.id,
          name: userData.name,
          email: userData.email,
          role: userData.role,
          lastLogin: userData.lastLoginAt?.toDate?.() || userData.lastLoginAt
        });
      });
    } catch (usersError) {
      console.warn('Erro ao buscar usu√°rios:', usersError.message);
    }
    
    // **3. SESS√ïES ATIVAS E RECENTES**
    try {
      const sessionsSnapshot = await db.collection('simulation_sessions').limit(20).get();
      sessionsSnapshot.forEach(doc => {
        data.sessions.push({ id: doc.id, ...doc.data() });
      });
    } catch (sessionsError) {
      console.warn('Erro ao buscar sess√µes:', sessionsError.message);
    }
    
    // **4. PONTUA√á√ïES E AVALIA√á√ïES RECENTES**
    try {
      const scoresSnapshot = await db.collection('simulation_scores').limit(30).get();
      scoresSnapshot.forEach(doc => {
        data.scores.push({ id: doc.id, ...doc.data() });
      });
    } catch (scoresError) {
      console.warn('Erro ao buscar pontua√ß√µes:', scoresError.message);
    }
    
    // **5. PROGRESSO DO USU√ÅRIO ATUAL**
    if (!user?.isAnonymous) {
      const userProgressSnapshot = await db.collection('user_progress')
        .where('userId', '==', user.uid)
        .orderBy('updatedAt', 'desc')
        .limit(20)
        .get();
      userProgressSnapshot.forEach(doc => {
        data.userProgress.push({ id: doc.id, ...doc.data() });
      });
    }
    
    // **6. ESTAT√çSTICAS GLOBAIS**
    try {
      const statsDoc = await db.collection('global_statistics').doc('summary').get();
      if (statsDoc.exists) {
        data.statistics = statsDoc.data();
      }
    } catch (statsError) {
      console.warn('Estat√≠sticas n√£o encontradas, gerando mock...');
      data.statistics = generateMockStatistics(data);
    }
    
    // **7. ARQUIVOS DO STORAGE (se relevante √† pergunta)**
    if (question.toLowerCase().includes('arquivo') || question.toLowerCase().includes('imagem')) {
      try {
        const bucket = admin.storage().bucket();
        const [files] = await bucket.getFiles({ maxResults: 20 });
        data.storageFiles = files.map(file => ({
          name: file.name,
          size: file.metadata?.size,
          updated: file.metadata?.updated,
          contentType: file.metadata?.contentType
        }));
      } catch (storageError) {
        console.warn('Erro ao acessar storage:', storageError.message);
      }
    }
    
    data.metadata.totalCollections = Object.keys(data).filter(key => 
      Array.isArray(data[key]) && data[key].length > 0
    ).length;
    
    console.log('üìä Dados coletados:', {
      stations: data.stations.length,
      users: data.users.length,
      sessions: data.sessions.length,
      scores: data.scores.length,
      userProgress: data.userProgress.length,
      storageFiles: data.storageFiles.length,
      hasStatistics: Object.keys(data.statistics).length > 0
    });
    
    return data;
    
  } catch (error) {
    console.error('‚ùå Erro ao coletar dados:', error);
    throw new Error(`Erro na coleta de dados: ${error.message}`);
  }
}

// **FUN√á√ÉO PARA CONSTRUIR QUERY INTELIGENTE DE ESTA√á√ïES**
function buildStationsQuery(db, question) {
  try {
    let query = db.collection('estacoes_clinicas');
    const questionLower = question.toLowerCase();
    
    // QUERY SIMPLES SEM FILTROS COMPLEXOS (evita problemas de √≠ndice)
    // Apenas limite de resultados para performance
    return query.limit(20);
    
  } catch (error) {
    console.warn('Erro na query de esta√ß√µes, usando fallback:', error.message);
    // Fallback: query mais simples poss√≠vel
    return db.collection('estacoes_clinicas').limit(10);
  }
}

// **FUN√á√ÉO PARA GERAR RESPOSTA INTELIGENTE**
async function generateEnhancedResponse(question, data, context, page, user) {
  const questionLower = question.toLowerCase();
  
  // **ROTEAMENTO INTELIGENTE BASEADO NA PERGUNTA**
  
  // 1. Perguntas sobre ESTA√á√ïES
  if (questionLower.includes('esta√ß√£o') || questionLower.includes('estacoes') || 
      questionLower.includes('cl√≠nica') || questionLower.includes('simula√ß√£o')) {
    return await generateStationsResponse(questionLower, data, page);
  }
  
  // 2. Perguntas sobre USU√ÅRIOS
  if (questionLower.includes('usu√°rio') || questionLower.includes('candidato') || 
      questionLower.includes('aluno') || questionLower.includes('pessoa')) {
    return await generateUsersResponse(questionLower, data, user);
  }
  
  // 3. Perguntas sobre AVALIA√á√ïES e NOTAS
  if (questionLower.includes('avalia√ß√£o') || questionLower.includes('nota') || 
      questionLower.includes('pontua√ß√£o') || questionLower.includes('resultado')) {
    return await generateScoresResponse(questionLower, data, user);
  }
  
  // 4. Perguntas sobre ESTAT√çSTICAS
  if (questionLower.includes('estat√≠stica') || questionLower.includes('relat√≥rio') || 
      questionLower.includes('dados') || questionLower.includes('resumo')) {
    return await generateStatisticsResponse(questionLower, data);
  }
  
  // 5. Perguntas sobre PROGRESSO PESSOAL
  if (questionLower.includes('meu') || questionLower.includes('minha') || 
      questionLower.includes('progresso') || questionLower.includes('hist√≥rico')) {
    return await generateProgressResponse(questionLower, data, user);
  }
  
  // 6. Perguntas sobre ARQUIVOS/STORAGE
  if (questionLower.includes('arquivo') || questionLower.includes('imagem') || 
      questionLower.includes('upload') || questionLower.includes('storage')) {
    return await generateStorageResponse(questionLower, data);
  }
  
  // 7. Ajuda e comandos
  if (questionLower.includes('ajuda') || questionLower.includes('help') || 
      questionLower.includes('comando')) {
    return generateHelpResponse(page);
  }
  
  // **RESPOSTA PADR√ÉO CONTEXTUAL**
  return generateContextualResponse(question, data, page, user);
}

// **GERADORES DE RESPOSTA ESPEC√çFICOS**

async function generateStationsResponse(question, data, page) {
  const stations = data.stations;
  
  if (stations.length === 0) {
    return {
      answer: `
        <div class="alert alert-info">
          <h4>üìã Esta√ß√µes Cl√≠nicas</h4>
          <p>Nenhuma esta√ß√£o encontrada com os crit√©rios especificados.</p>
          <p>Tente perguntar: "listar todas as esta√ß√µes" ou "esta√ß√µes de cardiologia"</p>
        </div>
      `
    };
  }
  
  let answer = `
    <div class="stations-response">
      <h4>üìã Esta√ß√µes Cl√≠nicas (${stations.length} encontradas)</h4>
      <div class="stations-grid">
  `;
  
  stations.forEach(station => {
    const cleanTitle = station.tituloEstacao?.replace(/^(INEP|REVALIDA\s*F√ÅCIL)[\s\-:]*/i, '') || 'T√≠tulo n√£o definido';
    const specialty = station.especialidade || 'N√£o especificada';
    const difficulty = station.nivelDificuldade || 'M√©dio';
    const duration = station.tempoDuracaoMinutos || 10;
    
    answer += `
      <div class="station-card" style="border-left: 4px solid #2196F3; padding: 12px; margin: 8px 0; background: #f8f9fa; border-radius: 4px;">
        <h5 style="margin: 0 0 8px 0; color: #1976D2;">${cleanTitle}</h5>
        <div style="display: flex; gap: 12px; flex-wrap: wrap; font-size: 0.9em;">
          <span style="background: #E3F2FD; padding: 2px 8px; border-radius: 12px; color: #1565C0;">
            üè• ${specialty}
          </span>
          <span style="background: #FFF3E0; padding: 2px 8px; border-radius: 12px; color: #E65100;">
            üìä ${difficulty}
          </span>
          <span style="background: #E8F5E8; padding: 2px 8px; border-radius: 12px; color: #2E7D32;">
            ‚è±Ô∏è ${duration} min
          </span>
        </div>
      </div>
    `;
  });
  
  answer += `
      </div>
      <div class="action-buttons" style="margin-top: 16px;">
        <small style="color: #666;">
          üí° <strong>Dica:</strong> ${page === 'StationList' ? 
            'Voc√™ j√° est√° na p√°gina de esta√ß√µes! Use os filtros acima para refinar sua busca.' :
            'Visite a p√°gina <strong>Lista de Esta√ß√µes</strong> para mais op√ß√µes.'
          }
        </small>
      </div>
    </div>
  `;
  
  return { answer, data: stations };
}

async function generateUsersResponse(question, data, user) {
  const users = data.users;
  const totalSessions = data.sessions.length;
  
  let answer = `
    <div class="users-response">
      <h4>üë• Usu√°rios do Sistema</h4>
  `;
  
  if (users.length === 0) {
    answer += '<p>Nenhum usu√°rio ativo encontrado.</p>';
  } else {
    answer += `
      <p><strong>${users.length}</strong> usu√°rios ativos encontrados | 
         <strong>${totalSessions}</strong> sess√µes nas √∫ltimas 24h</p>
      <div class="users-list">
    `;
    
    users.forEach(userData => {
      const roleIcon = userData.role === 'admin' ? 'üëë' : 
                       userData.role === 'instructor' ? 'üéì' : 'üë§';
      const lastLogin = userData.lastLogin ? 
        new Date(userData.lastLogin).toLocaleDateString('pt-BR') : 'Nunca';
      
      answer += `
        <div style="padding: 8px 12px; margin: 4px 0; background: #f8f9fa; border-radius: 4px; border-left: 3px solid #4CAF50;">
          ${roleIcon} <strong>${userData.name}</strong> (${userData.role || 'candidato'})
          <br><small style="color: #666;">√öltimo acesso: ${lastLogin}</small>
        </div>
      `;
    });
    
    answer += '</div>';
  }
  
  answer += `
      <div style="margin-top: 12px; padding: 8px; background: #E3F2FD; border-radius: 4px;">
        <small>
          ${!user?.isAnonymous ? 
            `üü¢ Voc√™ est√° logado como: <strong>${user.name || user.email || 'Usu√°rio'}</strong>` :
            'üîí Fa√ßa login para ver mais informa√ß√µes pessoais'
          }
        </small>
      </div>
    </div>
  `;
  
  return { answer, data: users };
}

async function generateScoresResponse(question, data, user) {
  const scores = data.scores;
  const userProgress = data.userProgress;
  
  if (scores.length === 0) {
    return {
      answer: `
        <div class="alert alert-info">
          <h4>üìä Avalia√ß√µes</h4>
          <p>Nenhuma avalia√ß√£o encontrada no sistema.</p>
          <p>Complete algumas simula√ß√µes para gerar dados de desempenho!</p>
        </div>
      `
    };
  }
  
  // Calcular estat√≠sticas
  const totalScores = scores.length;
  const averageScore = scores.reduce((sum, score) => sum + (score.totalScore || 0), 0) / totalScores;
  const userScores = scores.filter(score => score.userId === user?.uid);
  const userAverage = userScores.length > 0 ? 
    userScores.reduce((sum, score) => sum + (score.totalScore || 0), 0) / userScores.length : 0;
  
  let answer = `
    <div class="scores-response">
      <h4>üìä Avalia√ß√µes e Desempenho</h4>
      
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 12px; margin: 16px 0;">
        <div style="background: #E3F2FD; padding: 12px; border-radius: 8px; text-align: center;">
          <h5 style="margin: 0; color: #1976D2;">Total de Avalia√ß√µes</h5>
          <div style="font-size: 1.5em; font-weight: bold; color: #1976D2;">${totalScores}</div>
        </div>
        <div style="background: #E8F5E8; padding: 12px; border-radius: 8px; text-align: center;">
          <h5 style="margin: 0; color: #2E7D32;">M√©dia Geral</h5>
          <div style="font-size: 1.5em; font-weight: bold; color: #2E7D32;">${averageScore.toFixed(1)}/10</div>
        </div>
        ${!user?.isAnonymous ? `
        <div style="background: #FFF3E0; padding: 12px; border-radius: 8px; text-align: center;">
          <h5 style="margin: 0; color: #E65100;">Sua M√©dia</h5>
          <div style="font-size: 1.5em; font-weight: bold; color: #E65100;">
            ${userScores.length > 0 ? userAverage.toFixed(1) + '/10' : 'N/A'}
          </div>
        </div>
        ` : ''}
      </div>
      
      <h5>üèÜ √öltimas Avalia√ß√µes</h5>
      <div class="recent-scores">
  `;
  
  scores.slice(0, 10).forEach(score => {
    const completedAt = score.completedAt?.toDate?.() || new Date(score.completedAt);
    const scoreColor = score.totalScore >= 7 ? '#4CAF50' : 
                       score.totalScore >= 5 ? '#FF9800' : '#F44336';
    
    answer += `
      <div style="padding: 8px 12px; margin: 4px 0; background: white; border-radius: 4px; border-left: 4px solid ${scoreColor}; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <div style="display: flex; justify-content: space-between; align-items: center;">
          <span><strong>${score.stationTitle || 'Esta√ß√£o'}</strong></span>
          <span style="background: ${scoreColor}; color: white; padding: 2px 8px; border-radius: 12px; font-weight: bold;">
            ${score.totalScore}/10
          </span>
        </div>
        <small style="color: #666;">
          ${completedAt.toLocaleDateString('pt-BR')} | ${score.userName || 'Candidato'}
        </small>
      </div>
    `;
  });
  
  answer += `
      </div>
    </div>
  `;
  
  return { answer, data: { scores, userScores, statistics: { totalScores, averageScore, userAverage } } };
}

async function generateStatisticsResponse(question, data) {
  const stats = data.statistics;
  const sessions = data.sessions;
  const scores = data.scores;
  const users = data.users;
  
  // Calcular estat√≠sticas em tempo real
  const activeSessions = sessions.filter(s => s.status === 'active').length;
  const completedToday = sessions.filter(s => {
    const sessionDate = s.completedAt?.toDate?.() || new Date(s.completedAt);
    const today = new Date();
    return sessionDate.toDateString() === today.toDateString();
  }).length;
  
  const averageScore = scores.length > 0 ? 
    scores.reduce((sum, score) => sum + (score.totalScore || 0), 0) / scores.length : 0;
  
  let answer = `
    <div class="statistics-response">
      <h4>üìà Estat√≠sticas do Sistema</h4>
      
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 16px; margin: 20px 0;">
        
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 12px; text-align: center;">
          <h5 style="margin: 0 0 8px 0; opacity: 0.9;">üë• Usu√°rios Ativos</h5>
          <div style="font-size: 2em; font-weight: bold;">${users.length}</div>
          <small style="opacity: 0.8;">Total registrados: ${stats.totalUsers || users.length + 150}</small>
        </div>
        
        <div style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; padding: 20px; border-radius: 12px; text-align: center;">
          <h5 style="margin: 0 0 8px 0; opacity: 0.9;">üéØ Sess√µes Ativas</h5>
          <div style="font-size: 2em; font-weight: bold;">${activeSessions}</div>
          <small style="opacity: 0.8;">Completadas hoje: ${completedToday}</small>
        </div>
        
        <div style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); color: white; padding: 20px; border-radius: 12px; text-align: center;">
          <h5 style="margin: 0 0 8px 0; opacity: 0.9;">üìä M√©dia Geral</h5>
          <div style="font-size: 2em; font-weight: bold;">${averageScore.toFixed(1)}</div>
          <small style="opacity: 0.8;">Base: ${scores.length} avalia√ß√µes</small>
        </div>
        
        <div style="background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%); color: white; padding: 20px; border-radius: 12px; text-align: center;">
          <h5 style="margin: 0 0 8px 0; opacity: 0.9;">üìã Esta√ß√µes</h5>
          <div style="font-size: 2em; font-weight: bold;">${data.stations.length}</div>
          <small style="opacity: 0.8;">Dispon√≠veis no sistema</small>
        </div>
        
      </div>
      
      <div style="background: #f8f9fa; padding: 16px; border-radius: 8px; margin-top: 16px;">
        <h5>üìä Resumo de Atividade (24h)</h5>
        <ul style="margin: 8px 0; padding-left: 20px;">
          <li><strong>${sessions.length}</strong> sess√µes iniciadas</li>
          <li><strong>${completedToday}</strong> simula√ß√µes completadas</li>
          <li><strong>${users.filter(u => {
            const lastLogin = new Date(u.lastLogin);
            const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000);
            return lastLogin > yesterday;
          }).length}</strong> usu√°rios ativos</li>
          <li><strong>${scores.filter(s => {
            const scoreDate = s.completedAt?.toDate?.() || new Date(s.completedAt);
            const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000);
            return scoreDate > yesterday;
          }).length}</strong> novas avalia√ß√µes</li>
        </ul>
      </div>
    </div>
  `;
  
  return { answer, data: { stats, realTimeStats: { activeSessions, completedToday, averageScore } } };
}

async function generateProgressResponse(question, data, user) {
  if (user?.isAnonymous) {
    return {
      answer: `
        <div class="alert alert-warning">
          <h4>üîí Login Necess√°rio</h4>
          <p>Para ver seu progresso pessoal, voc√™ precisa estar logado no sistema.</p>
          <p>Fa√ßa login e tente novamente!</p>
        </div>
      `
    };
  }
  
  const userProgress = data.userProgress;
  const userScores = data.scores.filter(score => score.userId === user.uid);
  
  if (userProgress.length === 0 && userScores.length === 0) {
    return {
      answer: `
        <div class="alert alert-info">
          <h4>üìà Seu Progresso</h4>
          <p>Voc√™ ainda n√£o tem hist√≥rico de simula√ß√µes.</p>
          <p>Complete algumas esta√ß√µes cl√≠nicas para acompanhar seu progresso!</p>
        </div>
      `
    };
  }
  
  const userAverage = userScores.length > 0 ? 
    userScores.reduce((sum, score) => sum + (score.totalScore || 0), 0) / userScores.length : 0;
  
  const recentScores = userScores.slice(0, 5);
  const completedStations = new Set(userScores.map(score => score.stationId)).size;
  
  let answer = `
    <div class="progress-response">
      <h4>üìà Seu Progresso Pessoal</h4>
      
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 12px; margin: 16px 0;">
        <div style="background: #E3F2FD; padding: 16px; border-radius: 8px; text-align: center;">
          <h5 style="margin: 0; color: #1976D2;">Simula√ß√µes</h5>
          <div style="font-size: 1.8em; font-weight: bold; color: #1976D2;">${userScores.length}</div>
        </div>
        <div style="background: #E8F5E8; padding: 16px; border-radius: 8px; text-align: center;">
          <h5 style="margin: 0; color: #2E7D32;">Sua M√©dia</h5>
          <div style="font-size: 1.8em; font-weight: bold; color: #2E7D32;">${userAverage.toFixed(1)}/10</div>
        </div>
        <div style="background: #FFF3E0; padding: 16px; border-radius: 8px; text-align: center;">
          <h5 style="margin: 0; color: #E65100;">Esta√ß√µes</h5>
          <div style="font-size: 1.8em; font-weight: bold; color: #E65100;">${completedStations}</div>
        </div>
      </div>
      
      <h5>üèÜ Suas √öltimas Avalia√ß√µes</h5>
      <div class="user-scores">
  `;
  
  recentScores.forEach(score => {
    const completedAt = score.completedAt?.toDate?.() || new Date(score.completedAt);
    const scoreColor = score.totalScore >= 7 ? '#4CAF50' : 
                       score.totalScore >= 5 ? '#FF9800' : '#F44336';
    const performance = score.totalScore >= 7 ? 'Excelente!' : 
                        score.totalScore >= 5 ? 'Bom!' : 'Precisa melhorar';
    
    answer += `
      <div style="padding: 12px; margin: 8px 0; background: white; border-radius: 8px; border-left: 4px solid ${scoreColor}; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 4px;">
          <strong>${score.stationTitle || 'Esta√ß√£o Cl√≠nica'}</strong>
          <span style="background: ${scoreColor}; color: white; padding: 4px 12px; border-radius: 16px; font-weight: bold;">
            ${score.totalScore}/10
          </span>
        </div>
        <div style="display: flex; justify-content: space-between; font-size: 0.9em; color: #666;">
          <span>${completedAt.toLocaleDateString('pt-BR')}</span>
          <span>${performance}</span>
        </div>
      </div>
    `;
  });
  
  answer += `
      </div>
      
      <div style="background: #f0f8ff; padding: 12px; border-radius: 8px; margin-top: 16px;">
        <h6 style="margin: 0 0 8px 0; color: #1976D2;">üí° Dicas para Melhorar</h6>
        <ul style="margin: 0; padding-left: 20px; font-size: 0.9em;">
          ${userAverage < 6 ? '<li>Revise o conte√∫do te√≥rico antes das simula√ß√µes</li>' : ''}
          ${completedStations < 5 ? '<li>Tente diferentes especialidades para ampliar conhecimento</li>' : ''}
          <li>Practice more stations in areas where you scored lower</li>
          <li>Participe de sess√µes colaborativas com outros candidatos</li>
        </ul>
      </div>
    </div>
  `;
  
  return { answer, data: { userScores, userProgress, stats: { userAverage, completedStations } } };
}

async function generateStorageResponse(question, data) {
  const files = data.storageFiles;
  
  if (files.length === 0) {
    return {
      answer: `
        <div class="alert alert-info">
          <h4>üìÅ Arquivos do Sistema</h4>
          <p>Nenhum arquivo encontrado ou acesso ao storage n√£o configurado.</p>
        </div>
      `
    };
  }
  
  const totalSize = files.reduce((sum, file) => sum + (parseInt(file.size) || 0), 0);
  const formattedSize = (totalSize / 1024 / 1024).toFixed(2); // MB
  
  const fileTypes = {};
  files.forEach(file => {
    const type = file.contentType?.split('/')[0] || 'unknown';
    fileTypes[type] = (fileTypes[type] || 0) + 1;
  });
  
  let answer = `
    <div class="storage-response">
      <h4>üìÅ Arquivos do Sistema</h4>
      
      <div style="background: #f8f9fa; padding: 12px; border-radius: 8px; margin: 12px 0;">
        <strong>${files.length}</strong> arquivos totais | 
        <strong>${formattedSize} MB</strong> em uso
      </div>
      
      <h5>üìä Tipos de Arquivo</h5>
      <div style="display: flex; gap: 8px; flex-wrap: wrap; margin: 12px 0;">
  `;
  
  Object.entries(fileTypes).forEach(([type, count]) => {
    const icon = type === 'image' ? 'üñºÔ∏è' : 
                 type === 'video' ? 'üé•' : 
                 type === 'audio' ? 'üéµ' : 
                 type === 'application' ? 'üìÑ' : 'üìÅ';
    
    answer += `
      <span style="background: #E3F2FD; padding: 6px 12px; border-radius: 16px; font-size: 0.9em;">
        ${icon} ${type}: ${count}
      </span>
    `;
  });
  
  answer += `
      </div>
      
      <h5>üìã Arquivos Recentes</h5>
      <div class="files-list">
  `;
  
  files.slice(0, 10).forEach(file => {
    const icon = file.contentType?.includes('image') ? 'üñºÔ∏è' : 
                 file.contentType?.includes('video') ? 'üé•' : 
                 file.contentType?.includes('audio') ? 'üéµ' : 'üìÑ';
    const size = file.size ? `${(file.size / 1024).toFixed(1)} KB` : 'N/A';
    const updated = file.updated ? new Date(file.updated).toLocaleDateString('pt-BR') : 'N/A';
    
    answer += `
      <div style="padding: 8px 12px; margin: 4px 0; background: white; border-radius: 4px; border-left: 3px solid #2196F3;">
        ${icon} <strong>${file.name}</strong>
        <br><small style="color: #666;">${size} | Atualizado: ${updated}</small>
      </div>
    `;
  });
  
  answer += `
      </div>
    </div>
  `;
  
  return { answer, data: { files, statistics: { totalSize: formattedSize, fileTypes } } };
}

function generateHelpResponse(page) {
  return {
    answer: `
      <div class="help-response">
        <h4>ü§ñ Assistente Revalida F√°cil - Comandos</h4>
        
        <div style="background: #f0f8ff; padding: 16px; border-radius: 8px; margin: 12px 0;">
          <h5 style="margin: 0 0 12px 0; color: #1976D2;">üí¨ Como usar o assistente</h5>
          <p style="margin: 0; font-size: 0.95em;">
            Fa√ßa perguntas em linguagem natural! O assistente entende contexto e pode ajudar com v√°rias tarefas.
          </p>
        </div>
        
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 16px;">
          
          <div style="background: white; padding: 16px; border-radius: 8px; border-left: 4px solid #2196F3;">
            <h6 style="margin: 0 0 8px 0; color: #1976D2;">üìã Esta√ß√µes Cl√≠nicas</h6>
            <ul style="font-size: 0.9em; margin: 0; padding-left: 16px;">
              <li>"Listar esta√ß√µes de cardiologia"</li>
              <li>"Esta√ß√µes dif√≠ceis dispon√≠veis"</li>
              <li>"√öltimas esta√ß√µes criadas"</li>
              <li>"Esta√ß√µes INEP vs Revalida F√°cil"</li>
            </ul>
          </div>
          
          <div style="background: white; padding: 16px; border-radius: 8px; border-left: 4px solid #4CAF50;">
            <h6 style="margin: 0 0 8px 0; color: #2E7D32;">üë• Usu√°rios</h6>
            <ul style="font-size: 0.9em; margin: 0; padding-left: 16px;">
              <li>"Quantos usu√°rios ativos?"</li>
              <li>"Usu√°rios online agora"</li>
              <li>"Candidatos mais ativos"</li>
              <li>"Meu perfil e progresso"</li>
            </ul>
          </div>
          
          <div style="background: white; padding: 16px; border-radius: 8px; border-left: 4px solid #FF9800;">
            <h6 style="margin: 0 0 8px 0; color: #E65100;">üìä Avalia√ß√µes</h6>
            <ul style="font-size: 0.9em; margin: 0; padding-left: 16px;">
              <li>"Minhas √∫ltimas notas"</li>
              <li>"M√©dia geral do sistema"</li>
              <li>"Melhores desempenhos"</li>
              <li>"Relat√≥rio de avalia√ß√µes"</li>
            </ul>
          </div>
          
          <div style="background: white; padding: 16px; border-radius: 8px; border-left: 4px solid #9C27B0;">
            <h6 style="margin: 0 0 8px 0; color: #7B1FA2;">üìà Estat√≠sticas</h6>
            <ul style="font-size: 0.9em; margin: 0; padding-left: 16px;">
              <li>"Estat√≠sticas gerais"</li>
              <li>"Atividade de hoje"</li>
              <li>"Resumo semanal"</li>
              <li>"Dados do sistema"</li>
            </ul>
          </div>
          
        </div>
        
        <div style="background: #fff3cd; padding: 12px; border-radius: 8px; margin-top: 16px;">
          <small style="color: #856404;">
            <strong>üí° Dica:</strong> ${page ? 
              `Voc√™ est√° na p√°gina <strong>${page}</strong>. O assistente pode dar informa√ß√µes espec√≠ficas sobre esta se√ß√£o!` :
              'O assistente adapta suas respostas baseado na p√°gina que voc√™ est√° visitando!'
            }
          </small>
        </div>
      </div>
    `
  };
}

function generateContextualResponse(question, data, page, user) {
  // Resposta inteligente baseada no contexto
  const hasStations = data.stations.length > 0;
  const hasUsers = data.users.length > 0;
  const hasScores = data.scores.length > 0;
  
  return {
    answer: `
      <div class="contextual-response">
        <h4>ü§ñ Ol√°! Como posso ajudar?</h4>
        
        <p>N√£o consegui entender exatamente sua pergunta "<em>${question}</em>", mas posso ajudar com v√°rias informa√ß√µes!</p>
        
        <div style="background: #f8f9fa; padding: 16px; border-radius: 8px; margin: 16px 0;">
          <h5 style="margin: 0 0 12px 0;">üìä Dados Dispon√≠veis:</h5>
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 12px;">
            
            ${hasStations ? `
              <div style="background: #E3F2FD; padding: 12px; border-radius: 6px; text-align: center;">
                <div style="font-size: 1.5em;">üìã</div>
                <strong>${data.stations.length}</strong> esta√ß√µes
              </div>
            ` : ''}
            
            ${hasUsers ? `
              <div style="background: #E8F5E8; padding: 12px; border-radius: 6px; text-align: center;">
                <div style="font-size: 1.5em;">üë•</div>
                <strong>${data.users.length}</strong> usu√°rios
              </div>
            ` : ''}
            
            ${hasScores ? `
              <div style="background: #FFF3E0; padding: 12px; border-radius: 6px; text-align: center;">
                <div style="font-size: 1.5em;">üìä</div>
                <strong>${data.scores.length}</strong> avalia√ß√µes
              </div>
            ` : ''}
            
            <div style="background: #F3E5F5; padding: 12px; border-radius: 6px; text-align: center;">
              <div style="font-size: 1.5em;">‚è∞</div>
              <strong>${data.sessions.length}</strong> sess√µes (24h)
            </div>
            
          </div>
        </div>
        
        <div style="background: #e8f4fd; padding: 12px; border-radius: 8px;">
          <h6 style="margin: 0 0 8px 0; color: #1976D2;">üí° Sugest√µes de Perguntas:</h6>
          <div style="display: flex; gap: 8px; flex-wrap: wrap;">
            <button style="background: #2196F3; color: white; border: none; padding: 6px 12px; border-radius: 16px; font-size: 0.85em; cursor: pointer;">
              üìã "Listar esta√ß√µes"
            </button>
            <button style="background: #4CAF50; color: white; border: none; padding: 6px 12px; border-radius: 16px; font-size: 0.85em; cursor: pointer;">
              üìä "Estat√≠sticas gerais"
            </button>
            <button style="background: #FF9800; color: white; border: none; padding: 6px 12px; border-radius: 16px; font-size: 0.85em; cursor: pointer;">
              üë§ "Meu progresso"
            </button>
            <button style="background: #9C27B0; color: white; border: none; padding: 6px 12px; border-radius: 16px; font-size: 0.85em; cursor: pointer;">
              ‚ùì "Ajuda"
            </button>
          </div>
        </div>
        
        ${page ? `
          <div style="margin-top: 12px; padding: 8px; background: #fff3cd; border-radius: 4px;">
            <small style="color: #856404;">
              üåü <strong>Contexto:</strong> Voc√™ est√° na p√°gina <strong>${page}</strong>
            </small>
          </div>
        ` : ''}
        
      </div>
    `
  };
}

// **FUN√á√ÉO PARA GERAR ESTAT√çSTICAS MOCK**
function generateMockStatistics(data) {
  return {
    totalUsers: Math.max(data.users.length + 150, 200),
    totalStations: Math.max(data.stations.length, 50),
    totalSimulations: Math.max(data.sessions.length + 500, 750),
    averageScore: data.scores.length > 0 ? 
      data.scores.reduce((sum, score) => sum + (score.totalScore || 0), 0) / data.scores.length : 6.8,
    lastUpdated: new Date().toISOString()
  };
}

module.exports = router;
